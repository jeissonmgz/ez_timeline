{"version":3,"file":"ez-marker.js","sourceRoot":"","sources":["../src/ez-marker.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEF,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACtC,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAEnD;;;;;;GAMG;AAEJ,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,UAAU;IAQtC;QACE,KAAK,EAAE,CAAC;QACR,MAAM,EAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAC,GAAI,IAAI,CAAC,aAAyC,CAAC;QACzE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAEQ,gBAAgB;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,IAAI;;KAEtB,CAAC;IACJ,CAAC;IAEQ,OAAO;QACd,yBAAyB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IAClD,CAAC;CACF,CAAA;AAvBiB,0BAAiB,GAAmB,EAAC,GAAG,UAAU,CAAC,iBAAiB,EAAE,cAAc,EAAE,IAAI,EAAE,CAAA;AAJlF;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sCAAc;AACb;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;oCAAY;AACX;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sCAAc;AAJ5B,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CA6BpB;SA7BY,QAAQ","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\n import {LitElement, html } from 'lit';\r\n import {customElement, property } from 'lit/decorators.js';\r\nimport { ITimeElement } from './models';\r\nimport { updateChildrenTimeElement } from './utils';\r\n \r\n /**\r\n  * An example element.\r\n  *\r\n  * @fires count-changed - Indicates when the count changes\r\n  * @slot - This element has a slot\r\n  * @csspart button - The button\r\n  */\r\n@customElement('ez-marker')\r\nexport class EzMarker extends LitElement implements ITimeElement {\r\n\r\n  @property({type: Number}) from: number;\r\n  @property({type: Number}) to: number;\r\n  @property({type: Number}) step: number;\r\n\r\n  static override shadowRootOptions: ShadowRootInit = {...LitElement.shadowRootOptions, delegatesFocus: true};\r\n\r\n  constructor() {\r\n    super();\r\n    const {from, to, step} = (this.parentElement as unknown) as ITimeElement;\r\n    this.from = from;\r\n    this.to = to;\r\n    this.step = step;\r\n  }\r\n\r\n  override createRenderRoot(): LitElement {\r\n    return this;\r\n  }\r\n\r\n  override render() {\r\n    return html`${this.from}\r\n      <slot></slot>\r\n    `;\r\n  }\r\n\r\n  override updated(): void {\r\n    updateChildrenTimeElement(this, this.childNodes)\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'ez-marker': EzMarker;\r\n  }\r\n}\r\n"]}